//21.06.2020

#ifndef GRAPHICAL_H
#define GRAPHICAL_H

const char* insdecode()
{
	return "est";
}

void cls()
{
	for(int y = 0; y < 80; y++)
	{
		printf("\n");
	}
}


void interfacehalt() //setup interface for sim
{
	printf("state: halt_____________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("SETTINGS:_______________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("Options: 1. initialize running state (auto set flags, load .mem file____________\n");
	printf("_________2. show registers______________________________________________________\n");
	printf("_________3. edit memory_________________________________________________________\n");
	printf("_________4. save memory state___________________________________________________\n");
	printf("_________5. load memory from file ______________________________________________\n");
	printf("_________6. select stepping mode________________________________________________\n");
	printf("_________7. assemble code from file_____________________________________________\n");
	printf("_________8. begin program execution_____________________________________________\n");
	printf("_________9. Exit Sim____________________________________________________________\n");
}

void interfacerunning() //running interface for sim
{
	printf("current adress: %i                                                              \n", currentaddress);
	printf("                                                                                \n");
	printf("________load__|__write__|__return__|__jump__|__halt__|__alu__|__op0__|__op1_____\n");
	printf("FLAGS:    %i       %i         %i         %i         %i        %i       %i       %i         \n", loadflag, writeflag, returnflag, jumpflag, haltflag, aluflag, op0loadflag, op1loadflag);
	printf("________________________________________________________________________________\n");
	printf("Memory Value: %i                                                                \n", memory[currentaddress]);
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("Register:  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15      \n"); //0 - 15
	printf("Value:     %i | %i | %i | %i | %i | %i | %i | %i | %i | %i | %i  | %i  | %i  | %i  | %i  | %i      \n", dataregister[0], dataregister[1], dataregister[2], dataregister[3], dataregister[4], dataregister[5], dataregister[6], dataregister[7], dataregister[8], dataregister[9], dataregister[10], dataregister[11], dataregister[12], dataregister[13], dataregister[14], dataregister[15]); //content of active/selected register
	printf("________________________________________________________________________________\n");
	//printf("Instruction:    %i                                                              \n", &binary);
	printf("OPERATORS: %i (OP0)  %i (OP1)__________________________________________________\n", operator0, operator1);
	printf("ALU: r0_NAND_r%i__->__r%i________________________________________________________\n", operator1, operator0);
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
}

void goodbye()
{
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("_________________________________Au revoir!_____________________________________\n");
	printf("__________________________________Good Bye!_____________________________________\n");
	printf("_______________________________Auf Wiedersehen!_________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
	printf("________________________________________________________________________________\n");
}

int menu()
{
	option = 0;
	//cls();
	//interfacehalt();
	printf("USER INPUT: ");
	scanf(" %c", &option);
	switch(option)
	{
		case '1':
			globala = 1; //extinfile
			break;

		case '2':
			globala = 2; //initmem();
			break;

		case '3':
			globala = 3; //initialize();
			break;

		case '4':
			globala = 4; //select running mode
			break;

		case '5':
			globala = 5;
			break;

		case '6':
			globala = 6;
			break;

		case '7':
			globala = 7;
			break;

		case '8':
			globala = 8;
			break;

		case '9':
			globala = 9;
			break;

		//case '0':
		//	globala = 0; //do nothing/ stay in menu();
		//	break;
	}
}
#endif
